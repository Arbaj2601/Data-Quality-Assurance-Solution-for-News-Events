#!/usr/bin/env python3
import argparse, sqlite3, pandas as pd, smtplib, os
from email.mime.text import MIMEText
from datetime import datetime, timedelta

def fetch_metric(conn, where_clause):\n    q = f\"\"\"\n    SELECT AVG(CASE WHEN url LIKE 'http%://%' THEN 1 ELSE 0 END) AS pct_valid_url,\n           AVG(CASE WHEN length(language) IN (2,5) THEN 1 ELSE 0 END) AS pct_valid_lang,\n           AVG(CASE WHEN published_at <= ingested_at THEN 1 ELSE 0 END) AS pct_consistent\n    FROM news_events_clean\n    WHERE {where_clause}\n    \"\"\"\n    return pd.read_sql_query(q, conn).iloc[0].to_dict()\n\nTHRESHOLDS = {\n    \"pct_valid_url\": 0.98,\n    \"pct_valid_lang\": 0.95,\n    \"pct_consistent\": 0.97,\n}\n\nALERT_TO = os.environ.get(\"DQ_ALERT_TO\", \"\")\nSMTP_HOST = os.environ.get(\"SMTP_HOST\", \"\")\nSMTP_FROM = os.environ.get(\"SMTP_FROM\", \"\")\n\ndef send_alert(subject, body):\n    if not (ALERT_TO and SMTP_HOST and SMTP_FROM):\n        print(\"[ALERT]\", subject, \"\\n\" + body)\n        return\n    msg = MIMEText(body)\n    msg['Subject'] = subject\n    msg['From'] = SMTP_FROM\n    msg['To'] = ALERT_TO\n    with smtplib.SMTP(SMTP_HOST) as s:\n        s.sendmail(SMTP_FROM, [ALERT_TO], msg.as_string())\n\ndef main(db_path):\n    conn = sqlite3.connect(db_path)\n    since = (datetime.utcnow() - timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')\n    metrics = fetch_metric(conn, f\"ingested_at >= '{since}'\")\n    bad = []\n    for k, thr in THRESHOLDS.items():\n        val = metrics.get(k)\n        if val is not None and val < thr:\n            bad.append((k, val, thr))\n    if bad:\n        lines = [f\"{k}: {val:.3f} (threshold {thr:.3f})\" for k,val,thr in bad]\n        send_alert(\"DQ ALERT: Threshold breach\", \"\\n\".join(lines))\n    else:\n        print(\"All checks OK\", metrics)\n    conn.close()\n\nif __name__ == \"__main__\":\n    ap = argparse.ArgumentParser()\n    ap.add_argument(\"--db\", default=\"db/news_dq.sqlite\")\n    args = ap.parse_args()\n    main(args.db)\n